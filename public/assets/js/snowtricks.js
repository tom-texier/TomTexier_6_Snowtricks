!function(){"use strict";var e,n,t,r,o,i,c,a={452:function(e,n,t){t(756);function r(){document.querySelectorAll('form > div > input[type="file"][data-preview="true"]:not(initialized)').forEach((e=>{e.addEventListener("change",(function(n){e.parentNode.querySelector("img.preview-image").src=URL.createObjectURL(n.target.files[0])})),e.classList.add("initialized")}))}const o=".add_another_collection_widget",i="delete_another_collection_widget",c="."+i;function a(){document.querySelectorAll(".custom_collection_type:not(.initialized)").forEach((e=>{e.classList.add("initialized");let n=l(e,"data-min-items",!0),t=u(e);if(e.querySelectorAll(".collection_item").forEach((n=>{s(e,n)})),f(e),null!==n&&t<n)for(let r=t+1;r<=n;r++)p(e)})),document.querySelectorAll(o).forEach((e=>{e.removeEventListener("click",h),e.addEventListener("click",h)})),document.querySelectorAll(c).forEach((e=>{e.removeEventListener("click",m),e.addEventListener("click",m)}))}function d(e=null){r(),function(e=null){var n;document.querySelectorAll('form #trick_medias .collection_item input[type="radio"]:not(condition-initialized)').forEach((e=>{e.addEventListener("change",(function(n){let t=e.parentNode.parentNode.parentNode,r=t.querySelector("textarea").parentNode,o=t.querySelector('input[type="file"]').parentNode;if(1==e.value)r.style.display="none",o.style.display="block";else{if(2!=e.value)return!1;r.style.display="block",o.style.display="none"}})),e.classList.add("condition-initialized")})),null!==e&&((n=e).querySelector("textarea").parentNode.style.display="none",n.querySelector('input[type="file"]').parentNode.style.display="block")}(e)}function l(e,n,t=!1){let r=void 0===e.getAttribute(n)?null:e.getAttribute(n);return t&&null!==r?parseInt(r):r}function u(e){return l(e,"data-widget-counter",!0)||e.children.length}function s(e,n){!function(e,n){if(1!=l(e,"data-allow-delete",!0))return!1;let t=document.createElement("a");t.href="#",t.innerHTML='<i class="fas fa-trash"></i>',t.classList.add(i),t=n.appendChild(t),t.addEventListener("click",m)}(e,n)}function f(e){let n=l(e,"data-min-items",!0),t=l(e,"data-max-items",!0),r=u(e),i=e.parentElement.querySelector(o),a=e.querySelectorAll(c);i.style.display=null!==t&&r===t?"none":"block",null!==n&&r===n?a.forEach((e=>{e.style.display="none"})):a.forEach((e=>{e.style.display="flex"}))}function p(e){let n=l(e,"data-max-items",!0),t=u(e);if(null!==n&&t===n)return!1;let r=l(e,"data-prototype"),o=new RegExp("__name__","g");""!==l(e,"data-prototype-name")&&(o=new RegExp(l(e,"data-prototype-name"),"g")),t++,r=r.replace(o,t),e.setAttribute("data-widget-counter",t);let i=document.createElement(l(e,"data-widget-tags"));i.classList.add("collection_item"),i.innerHTML=r,e.appendChild(i),s(e,i),f(e),d(i),a()}function h(e){e.preventDefault();let n=e.target,t=document.querySelector(l(n,"data-collection-selector"));p(t),f(t)}function m(e){e.preventDefault();let n=e.target,t=n.closest(".custom_collection_type");n.closest(".collection_item").remove(),f(t)}window.onload=e=>{r(),a()}},783:function(e,n,t){var r=t(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function d(e,n){if(!n){if(!e.href)return;n=e.href.split("?")[0]}if(u(n)&&!1!==e.isLoaded&&n&&n.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(n,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function l(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&d(e)}))}function u(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,n){if(i)return console.log("no window.document found, will not HMR CSS"),a;var t,s,f=function(e){var n=o[e];if(!n){if(document.currentScript)n=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(n=i.src)}o[e]=n}return function(e){if(!n)return null;var t=n.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return r(n.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[n.replace(".js",".css")]}}(e);return t=function(){var e=f(n.filename),t=function(e){if(!e)return!1;var n=document.querySelectorAll("link"),t=!1;return c.call(n,(function(n){if(n.href){var o=function(e,n){var t;return e=r(e),n.some((function(r){e.indexOf(n)>-1&&(t=r)})),t}(n.href,e);u(o)&&!0!==n.visited&&o&&(d(n,o),t=!0)}})),t}(e);if(n.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void l();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),l())},50,s=0,function(){var e=this,n=arguments,r=function(){return t.apply(e,n)};clearTimeout(s),s=setTimeout(r,50)}}},618:function(e){e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var n=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(n,"i"),"").split("/"),r=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",n+r+t.reduce((function(e,n){switch(n){case"..":e.pop();break;case".":break;default:e.push(n)}return e}),[]).join("/")}},756:function(e,n,t){var r=t(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},d={};function l(e){var n=d[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var t=d[e]={id:e,exports:{}};try{var r={id:e,module:t,factory:a[e],require:l};l.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require)}catch(e){throw t.error=e,e}return t.exports}l.m=a,l.c=d,l.i=[],l.hu=function(e){return e+"."+l.h()+".hot-update.js"},l.miniCssF=function(e){},l.hmrF=function(){return"snowtricks."+l.h()+".hot-update.json"},l.h=function(){return"deb88e901b4bed461c48"},l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},e={},n="cwa-addons:",l.l=function(t,r,o,i){if(e[t])e[t].push(r);else{var c,a;if(void 0!==o)for(var d=document.getElementsByTagName("script"),u=0;u<d.length;u++){var s=d[u];if(s.getAttribute("src")==t||s.getAttribute("data-webpack")==n+o){c=s;break}}c||(a=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,l.nc&&c.setAttribute("nonce",l.nc),c.setAttribute("data-webpack",n+o),c.src=t),e[t]=[r];var f=function(n,r){c.onerror=c.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((function(e){return e(r)})),n)return n(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),a&&document.head.appendChild(c)}},function(){var e,n,t,r={},o=l.c,i=[],c=[],a="idle",d=0,u=[];function s(e){a=e;for(var n=[],t=0;t<c.length;t++)n[t]=c[t].call(null,e);return Promise.all(n)}function f(){0==--d&&s("ready").then((function(){if(0===d){var e=u;u=[];for(var n=0;n<e.length;n++)e[n]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return s("check").then(l.hmrM).then((function(t){return t?s("prepare").then((function(){var r=[];return n=[],Promise.all(Object.keys(l.hmrC).reduce((function(e,o){return l.hmrC[o](t.c,t.r,t.m,e,n,r),e}),[])).then((function(){return n=function(){return e?m(e):s("ready").then((function(){return r}))},0===d?n():new Promise((function(e){u.push((function(){e(n())}))}));var n}))})):s(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var r=n.map((function(n){return n(e)}));n=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return s("abort").then((function(){throw o[0]}));var i=s("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var c,a=s("apply"),d=function(e){c||(c=e)},l=[];return r.forEach((function(e){if(e.apply){var n=e.apply(d);if(n)for(var t=0;t<n.length;t++)l.push(n[t])}})),Promise.all([i,a]).then((function(){return c?s("fail").then((function(){throw c})):t?m(e).then((function(e){return l.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):s("idle").then((function(){return l}))}))}function v(){if(t)return n||(n=[]),Object.keys(l.hmrI).forEach((function(e){t.forEach((function(t){l.hmrI[e](t,n)}))})),t=void 0,!0}l.hmrD=r,l.i.push((function(u){var m,v,y,g,E=u.module,w=function(n,t){var r=o[t];if(!r)return n;var c=function(c){if(r.hot.active){if(o[c]){var a=o[c].parents;-1===a.indexOf(t)&&a.push(t)}else i=[t],e=c;-1===r.children.indexOf(c)&&r.children.push(c)}else console.warn("[HMR] unexpected require("+c+") from disposed module "+t),i=[];return n(c)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var u in n)Object.prototype.hasOwnProperty.call(n,u)&&"e"!==u&&Object.defineProperty(c,u,l(u));return c.e=function(e){return function(e){switch(a){case"ready":s("prepare");case"prepare":return d++,e.then(f,f),e;default:return e}}(n.e(e))},c}(u.require,u.id);E.hot=(m=u.id,v=E,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){i=v.parents.slice(),e=y?void 0:m,l(m)},active:!0,accept:function(e,n,t){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._acceptedDependencies[e[r]]=n||function(){},g._acceptedErrorHandlers[e[r]]=t;else g._acceptedDependencies[e]=n||function(){},g._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._declinedDependencies[e[n]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=g._disposeHandlers.indexOf(e);n>=0&&g._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":n=[],Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](m,n)})),s("ready");break;case"ready":Object.keys(l.hmrI).forEach((function(e){l.hmrI[e](m,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return a;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var n=c.indexOf(e);n>=0&&c.splice(n,1)},data:r[m]},e=void 0,g),E.parents=i,E.children=[],i=[],u.require=w})),l.hmrC={},l.hmrI={}}(),function(){var e;l.g.importScripts&&(e=l.g.location+"");var n=l.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e+"../"}(),t=function(e,n,t,r){var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=function(i){if(o.onerror=o.onload=null,"load"===i.type)t();else{var c=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||n,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=c,d.request=a,o.parentNode.removeChild(o),r(d)}},o.href=n,document.head.appendChild(o),o},r=function(e,n){for(var t=document.getElementsByTagName("link"),r=0;r<t.length;r++){var o=(c=t[r]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===n))return c}var i=document.getElementsByTagName("style");for(r=0;r<i.length;r++){var c;if((o=(c=i[r]).getAttribute("data-href"))===e||o===n)return c}},o=[],i=[],c=function(e){return{dispose:function(){for(var e=0;e<o.length;e++){var n=o[e];n.parentNode&&n.parentNode.removeChild(n)}o.length=0},apply:function(){for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}},l.hmrC.miniCss=function(e,n,a,d,u,s){u.push(c),e.forEach((function(e){var n=l.miniCssF(e),c=l.p+n,a=r(n,c);a&&d.push(new Promise((function(n,r){var d=t(e,c,(function(){d.as="style",d.rel="preload",n()}),r);o.push(a),i.push(d)})))}))},function(){var e,n,t,r,o,i=l.hmrS_jsonp=l.hmrS_jsonp||{403:0},c={};function a(n,t){return e=t,new Promise((function(e,t){c[n]=e;var r=l.p+l.hu(n),o=new Error;l.l(r,(function(e){if(c[n]){c[n]=void 0;var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+n+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,t(o)}}))}))}function d(e){function c(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,c=o.chain,d=l.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var u=0;u<d.parents.length;u++){var s=d.parents[u],f=l.c[s];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([s]),moduleId:i,parentId:s};-1===n.indexOf(s)&&(f.hot._acceptedDependencies[i]?(t[s]||(t[s]=[]),a(t[s],[i])):(delete t[s],n.push(s),r.push({chain:c.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function a(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}l.f&&delete l.f.jsonpHmr,n=void 0;var d={},u=[],s={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(l.o(t,p)){var h,m=t[p],v=!1,y=!1,g=!1,E="";switch((h=m?c(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(y)for(p in s[p]=m,a(u,h.outdatedModules),h.outdatedDependencies)l.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),a(d[p],h.outdatedDependencies[p]));g&&(a(u,[h.moduleId]),s[p]=f)}t=void 0;for(var w,b=[],_=0;_<u.length;_++){var k=u[_],A=l.c[k];A&&(A.hot._selfAccepted||A.hot._main)&&s[k]!==f&&!A.hot._selfInvalidated&&b.push({module:k,require:A.hot._requireSelf,errorHandler:A.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete i[e]})),r=void 0;for(var n,t=u.slice();t.length>0;){var o=t.pop(),c=l.c[o];if(c){var a={},s=c.hot._disposeHandlers;for(_=0;_<s.length;_++)s[_].call(null,a);for(l.hmrD[o]=a,c.hot.active=!1,delete l.c[o],delete d[o],_=0;_<c.children.length;_++){var f=l.c[c.children[_]];f&&(e=f.parents.indexOf(o))>=0&&f.parents.splice(e,1)}}}for(var p in d)if(l.o(d,p)&&(c=l.c[p]))for(w=d[p],_=0;_<w.length;_++)n=w[_],(e=c.children.indexOf(n))>=0&&c.children.splice(e,1)},apply:function(n){for(var t in s)l.o(s,t)&&(l.m[t]=s[t]);for(var r=0;r<o.length;r++)o[r](l);for(var i in d)if(l.o(d,i)){var c=l.c[i];if(c){w=d[i];for(var a=[],f=[],p=[],h=0;h<w.length;h++){var m=w[h],v=c.hot._acceptedDependencies[m],y=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),f.push(y),p.push(m)}}for(var g=0;g<a.length;g++)try{a[g].call(null,w)}catch(t){if("function"==typeof f[g])try{f[g](t,{moduleId:i,dependencyId:p[g]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[g],error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[g],error:t}),e.ignoreErrored||n(t)}}}for(var E=0;E<b.length;E++){var _=b[E],k=_.module;try{_.require(k)}catch(t){if("function"==typeof _.errorHandler)try{_.errorHandler(t,{moduleId:k,module:l.c[k]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:k,error:t}),e.ignoreErrored||n(t)}}return u}}}self.webpackHotUpdatecwa_addons=function(n,r,i){for(var a in r)l.o(r,a)&&(t[a]=r[a],e&&e.push(a));i&&o.push(i),c[n]&&(c[n](),c[n]=void 0)},l.hmrI.jsonp=function(e,n){t||(t={},o=[],r=[],n.push(d)),l.o(t,e)||(t[e]=l.m[e])},l.hmrC.jsonp=function(e,c,u,s,f,p){f.push(d),n={},r=c,t=u.reduce((function(e,n){return e[n]=!1,e}),{}),o=[],e.forEach((function(e){l.o(i,e)&&void 0!==i[e]?(s.push(a(e,p)),n[e]=!0):n[e]=!1})),l.f&&(l.f.jsonpHmr=function(e,t){n&&l.o(n,e)&&!n[e]&&(t.push(a(e)),n[e]=!0)})},l.hmrM=function(){if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(l.p+l.hmrF()).then((function(e){if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}}(),l(452)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,